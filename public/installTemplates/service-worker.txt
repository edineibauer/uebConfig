const VERSION = '';
const HOME = '';

self.addEventListener('fetch', function (e) {

    let url = e.request.url.replace(HOME, '');
    let core = new RegExp("assetsPublic\/", "i");
    let view = new RegExp("view\/", "i");
    let get = new RegExp("get\/", "i");
    let set = new RegExp("set\/", "i");

    if(core.test(url)) {

        //FIRST CACHE ELSE ONLINE AND CACHE
        e.respondWith(
            caches.open('core-v' + VERSION).then(cache => {
                return cache.match(e.request).then(response => {
                    if (response)
                        return response;

                    //não possui cache, request online
                    return fetch(e.request).then(networkResponse => {

                        //se online estiver ok, armazena no cache
                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                            cache.put(e.request, networkResponse.clone());
                            return networkResponse;
                        } else {
                            return fetch("get/blank");
                        }

                    }).catch(error => {
                        return fetch("get/blank");
                    });
                });
            })
        );

    } else if(view.test(url)) {

        //FIRST ONLINE, UPDATE CACHE
        e.respondWith(
            caches.open('view-v' + VERSION).then(cache => {
                return cache.match(e.request).then(response => {

                    return fetch(e.request).then(networkResponse => {

                        //se online estiver ok, armazena no cache
                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                            cache.put(e.request, networkResponse.clone());
                            return networkResponse;

                        } else {
                            return response || fetch("get/blank");
                        }

                    }).catch(error => {
                        return response || fetch("get/blank");
                    });
                });
            })
        );

    } else if(get.test(url)) {

        //FIRST ONLINE, UPDATE CACHE
        e.respondWith(
            caches.open('get-v' + VERSION).then(cache => {
                return cache.match(e.request).then(response => {

                    return fetch(e.request).then(networkResponse => {

                        //se online estiver ok, armazena no cache
                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                            cache.put(e.request, networkResponse.clone());
                            return networkResponse;

                        } else {
                            return response || fetch("get/blank");
                        }

                    }).catch(error => {
                        return response || fetch("get/blank");
                    });
                });
            })
        );

    } else if(set.test(url)) {

        //NO CACHE, JUST ONLINE OR BLANK
        e.respondWith(
            fetch(e.request).then(networkResponse => {

                //se o request online estiver ok, retorna ele, se não retorna error
                if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                    return networkResponse;

                return fetch("get/blank");

            }).catch(error => {
                return fetch("get/blank");
            })
        );

    } else {

        if(url === HOME || url === "/" || url === "index" || url.split('.').length === 1) {

            //PÁGINAS, DIRECT CORE INDEX CACHE OR ONLINE OR BLANK
            e.respondWith(
                caches.open('core-v' + VERSION).then(cache => {
                    return cache.match("index").then(response => {
                        if(response)
                            return response;

                        //update cache
                        return fetch("index").then(networkResponse => {
                            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                                cache.put(e.request, networkResponse.clone());
                                return networkResponse;
                            } else {
                                return fetch("get/blank");
                            }

                        }).catch(error => {
                            return fetch("get/blank");
                        });
                    });
                })
            );

        } else {

            //REQUEST resource
            // determina qual cache deve deve ser usado para este request
            // ONLINE FIRST, UPDATE CACHE

            let extension = url.split('.').pop().split('&').reverse().pop();
            let cacheName = 'misc';
            if(["png", "jpg", "jpeg", "gif", "bmp", "tif", "tiff", "psd", "svg", "mp3", "aac", "ogg", "wma", "mid", "alac", "flac", "wav", "pcm", "aiff", "ac3", "mp4", "avi", "mkv", "mpeg", "flv", "wmv", "mov", "rmvb", "vob", "3gp", "mpg"].indexOf(extension) > -1) {
                cacheName = 'midia';
            } else if(extension === 'js') {
                cacheName = 'js';
            } else if(extension === 'css' || extension === 'ttf' || extension === "woff" || extension === 'woff2') {
                cacheName = 'css';
            }

            //retorna online or cache
            e.respondWith(
                caches.open(cacheName + "-v" + VERSION).then(cache => {
                    return cache.match(e.request).then(response => {

                        //update cache
                        return fetch(e.request).then(networkResponse => {

                            //se conexão e conexão correta e conexão para o domínio principal
                            //cache content local
                            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                                cache.put(e.request, networkResponse.clone());
                                return networkResponse;
                            } else {
                                return response || fetch("get/blank");
                            }

                        }).catch(error => {
                            return response || fetch("get/blank");
                        });
                    });
                })
            );
        }
    }
});