const VERSION = '';
const HOME = '';

self.addEventListener('fetch', function (e) {

    let url = e.request.url.replace(HOME, '');
    let fonts = new RegExp("assetsPublic\/fonts\/", "i");
    let images = new RegExp("assetsPublic\/img\/", "i");
    let reacts = new RegExp("assetsPublic\/react\/", "i");
    let viewJs = new RegExp("assetsPublic\/view\/\.+.min.js$", "i");
    let viewCss = new RegExp("assetsPublic\/view\/\.+.min.css$", "i");
    let core = new RegExp("assetsPublic\/", "i");
    let view = new RegExp("view\/", "i");
    let get = new RegExp("get\/", "i");
    let set = new RegExp("set$", "i");
    let cacheImages = new RegExp("image\/", "i");

    if(core.test(url)) {
        let cacheName = (viewJs.test(url) ? 'viewJs' : (viewCss.test(url) ? 'viewCss' : (fonts.test(url) ? 'fonts' : (images.test(url) ? 'images' : (reacts.test(url) ? 'reacts' : 'core')))));
        e.respondWith(
            caches.open(cacheName + '-v' + VERSION).then(cache => {
                return cache.match(url).then(response => {
                    return response || fetch(e.request).then(networkResponse => {

                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                            return networkResponse;

                        return caches.open('get-v' + VERSION).then(cache => {
                            return cache.match(HOME + "get/blank");
                        });

                    }).catch(error => {
                        return caches.open('get-v' + VERSION).then(cache => {
                            return cache.match(HOME + "get/blank");
                        });
                    });
                });
            })
        );

    } else if(cacheImages.test(url)) {
        e.respondWith(
            caches.open('cacheImage-v' + VERSION).then(cache => {
                return cache.match(url).then(response => {
                    return response || fetch(e.request).then(networkResponse => {

                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
                            cache.put(url, networkResponse.clone());
                            return networkResponse;
                        }

                        return caches.open('view-v' + VERSION).then(cache => {
                            return cache.match(HOME + "view/network");
                        })

                    }).catch(error => {
                        return caches.open('view-v' + VERSION).then(cache => {
                            return cache.match(HOME + "view/network");
                        })
                    });
                });
            })
        );

    } else if(view.test(url)) {
        let listagens = new RegExp("listagem\/\.+", "i");
        let formulario = new RegExp("formulario\/\.+", "i");
        if(listagens.test(url))
            url = HOME + "view/listagem";
        else if(formulario.test(url))
            url = HOME + "view/formulario";

        e.respondWith(
            caches.open('view-v' + VERSION).then(cache => {
                return cache.match(url).then(response => {
                    return response || fetch(e.request).then(networkResponse => {

                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                            return networkResponse;

                        return caches.open('view-v' + VERSION).then(cache => {
                            return cache.match(HOME + "view/network");
                        })

                    }).catch(error => {
                        return caches.open('view-v' + VERSION).then(cache => {
                            return cache.match(HOME + "view/network");
                        })
                    });
                });
            })
        );

    } else if(get.test(url)) {

        e.respondWith(
            caches.open('get-v' + VERSION).then(cache => {
                return cache.match(url).then(response => {
                    return response || fetch(e.request).then(networkResponse => {

                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                            return networkResponse;

                        return caches.open('get-v' + VERSION).then(cache => {
                            return cache.match(HOME + "get/blank");
                        });

                    }).catch(error => {
                        return caches.open('get-v' + VERSION).then(cache => {
                            return cache.match(HOME + "get/blank");
                        });
                    });
                });
            })
        );

    } else if(set.test(url)) {

        e.respondWith(
            caches.open('core-v' + VERSION).then(cache => {
                return cache.match(HOME + 'set').then(response => {
                    return fetch(e.request).then(networkResponse => {

                        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                            return networkResponse;

                        return response;

                    }).catch(error => {
                        return response;
                    });
                });
            })
        );
    } else {

        if(url === HOME || url === "/" || url === "index" || url.split('.').length === 1) {

            //PÁGINAS, DIRECT CORE INDEX CACHE OR ONLINE OR BLANK
            e.respondWith(
                caches.open('core-v' + VERSION).then(cache => {
                    return cache.match(HOME + "index").then(response => {

                        return response || fetch("index").then(networkResponse => {
                            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                                return networkResponse;

                            return caches.open('view-v' + VERSION).then(cache => {
                                return cache.match(HOME + "view/network");
                            })

                        }).catch(error => {
                            return caches.open('view-v' + VERSION).then(cache => {
                                return cache.match(HOME + "view/network");
                            })
                        });
                    });
                })
            );

        } else {

            let extension = url.split('.').pop().split('&').reverse().pop();
            let cacheName = 'misc';
            if(["png", "jpg", "jpeg", "gif", "bmp", "tif", "tiff", "psd", "svg", "mp3", "aac", "ogg", "wma", "mid", "alac", "flac", "wav", "pcm", "aiff", "ac3", "mp4", "avi", "mkv", "mpeg", "flv", "wmv", "mov", "rmvb", "vob", "3gp", "mpg"].indexOf(extension) > -1)
                cacheName = 'midia';

            e.respondWith(
                caches.open(cacheName + "-v" + VERSION).then(cache => {
                    return cache.match(url).then(response => {

                        return response || fetch(e.request).then(networkResponse => {

                            if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic')
                                return networkResponse;

                            return caches.open('get-v' + VERSION).then(cache => {
                                return cache.match(HOME + "get/blank");
                            });

                        }).catch(error => {
                            return caches.open('get-v' + VERSION).then(cache => {
                                return cache.match(HOME + "get/blank");
                            });
                        });
                    });
                })
            );
        }
    }
});